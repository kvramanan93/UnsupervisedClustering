{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9536134,"sourceType":"datasetVersion","datasetId":5808245},{"sourceId":9545198,"sourceType":"datasetVersion","datasetId":5815179},{"sourceId":9552598,"sourceType":"datasetVersion","datasetId":5820476},{"sourceId":9560444,"sourceType":"datasetVersion","datasetId":5826000}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-05T10:37:34.387036Z","iopub.execute_input":"2024-10-05T10:37:34.388014Z","iopub.status.idle":"2024-10-05T10:37:35.471709Z","shell.execute_reply.started":"2024-10-05T10:37:34.387969Z","shell.execute_reply":"2024-10-05T10:37:35.470653Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/dataset/Cluster.txt\n/kaggle/input/midcluster/midCluster.txt\n/kaggle/input/smallercluster/smallerCluster.txt\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom transformers import pipeline","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:10:56.666673Z","iopub.execute_input":"2024-10-07T05:10:56.667029Z","iopub.status.idle":"2024-10-07T05:11:19.174513Z","shell.execute_reply.started":"2024-10-07T05:10:56.666995Z","shell.execute_reply":"2024-10-07T05:11:19.173651Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"file_path = \"/kaggle/input/midcluster/midCluster.txt\"\nwith open(file_path, 'r', encoding='utf-8') as file:\n    documents = file.readlines()","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:11:19.176369Z","iopub.execute_input":"2024-10-07T05:11:19.177203Z","iopub.status.idle":"2024-10-07T05:11:19.218721Z","shell.execute_reply.started":"2024-10-07T05:11:19.177151Z","shell.execute_reply":"2024-10-07T05:11:19.217932Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import re\nimport nltk\nimport pandas as pd\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer\n\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n\n# Load the dataset\nfile_path = \"/kaggle/input/midcluster/midCluster.txt\"  # Update the path\nwith open(file_path, 'r', encoding='utf-8') as file:\n    data = file.readlines()\n\n# Step 1: Lowercase the text\ndata = [line.lower() for line in data]\n\n# Step 2: Remove special characters, numbers, and [REF]\ndata = [re.sub(r'\\[.?\\]', '', line) for line in data]  # Remove [REF]\ndata = [re.sub(r'\\[ref\\]', '', line)for line in data]\n# Step 3: Tokenization\ntokenized_data = [word_tokenize(line) for line in data]\n\n# Step 4: Remove stop words\nstop_words = set(stopwords.words('english'))\n#stop_words.remove('y')\ntokenized_data = [[word for word in line if word not in stop_words] for line in tokenized_data]\n\n# Step 5: Lemmatization\n#lemmatizer = WordNetLemmatizer()\n#lemmatized_data = [[lemmatizer.lemmatize(word) for word in line] for line in tokenized_data]\n\n# Step 6: Join tokens back into cleaned text\ndocuments_cleaned = [' '.join(line) for line in tokenized_data]\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:12:44.659777Z","iopub.execute_input":"2024-10-07T05:12:44.660174Z","iopub.status.idle":"2024-10-07T05:12:47.015055Z","shell.execute_reply.started":"2024-10-07T05:12:44.660131Z","shell.execute_reply":"2024-10-07T05:12:47.014026Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package omw-1.4 to /usr/share/nltk_data...\n[nltk_data]   Package omw-1.4 is already up-to-date!\n","output_type":"stream"}]},{"cell_type":"code","source":"file_path = \"/kaggle/input/midcluster/midCluster.txt\"  # Update the path\nwith open(file_path, 'r', encoding='utf-8') as file:\n    dataread = file.readlines()","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:43:29.759282Z","iopub.execute_input":"2024-10-06T10:43:29.759811Z","iopub.status.idle":"2024-10-06T10:43:29.773712Z","shell.execute_reply.started":"2024-10-06T10:43:29.759758Z","shell.execute_reply":"2024-10-06T10:43:29.772552Z"},"trusted":true},"execution_count":349,"outputs":[]},{"cell_type":"code","source":"documents_cleaned[8189]","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:28:32.541572Z","iopub.execute_input":"2024-10-07T07:28:32.542319Z","iopub.status.idle":"2024-10-07T07:28:32.548309Z","shell.execute_reply.started":"2024-10-07T07:28:32.542275Z","shell.execute_reply":"2024-10-07T07:28:32.547342Z"},"trusted":true},"execution_count":106,"outputs":[{"execution_count":106,"output_type":"execute_result","data":{"text/plain":"'lenin ordered precious metals , precious stones valuable material could found religious buildings throughout country confiscated sold order create funds help relieve famine ['"},"metadata":{}}]},{"cell_type":"code","source":"#print(stop_words)","metadata":{"execution":{"iopub.status.busy":"2024-10-06T15:13:44.369331Z","iopub.execute_input":"2024-10-06T15:13:44.370014Z","iopub.status.idle":"2024-10-06T15:13:44.374555Z","shell.execute_reply.started":"2024-10-06T15:13:44.369974Z","shell.execute_reply":"2024-10-06T15:13:44.373682Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"{\"needn't\", 'should', 'or', 'during', 'out', 'most', 'her', \"she's\", 'didn', 'wasn', 'do', 'on', \"hadn't\", 'if', 'their', 'we', 'a', 'that', \"wasn't\", 'now', 'shouldn', 'hasn', 'again', 'only', 'but', 'so', 'haven', 'once', 'there', 'he', 'before', 'doing', \"that'll\", \"should've\", 'more', 'between', \"don't\", 'herself', 'this', 'all', 'some', 'don', 'no', 'against', 'can', 'does', 'because', 'had', \"doesn't\", 'why', 'did', 'me', 'under', 'themselves', 'shan', \"you're\", 'ma', 'the', 's', 'weren', 'in', 'wouldn', 'how', 'will', 'myself', 'than', 'his', \"mustn't\", 'doesn', 'needn', 'yourselves', 'mustn', \"you'd\", 'down', 'those', \"you've\", 'have', 'which', \"haven't\", \"mightn't\", \"you'll\", 'any', 'its', 'above', 'mightn', 'into', 'o', 'couldn', \"shan't\", 'hers', 'am', 'for', 'm', \"won't\", 'are', 'too', 'from', 'through', 've', 'were', \"it's\", 'after', 'd', 'hadn', 'itself', 'as', 'until', 'where', 'both', 'being', 'below', 'an', 'was', 'just', 'won', 'whom', 'these', 'our', 'then', 'and', 'up', 'nor', 'aren', 'own', \"didn't\", \"weren't\", 'him', \"wouldn't\", 'ourselves', 'over', 'yours', 'be', 'further', 'with', 'while', 'ours', 'your', 'ain', 'when', 'very', 'who', 't', 'off', \"couldn't\", 'of', \"aren't\", 'been', 'isn', 'at', 'them', 'here', 'having', 'yourself', 'll', 'himself', 'i', 'such', 'not', 'same', 'you', 'to', \"isn't\", 'theirs', 're', 'what', 'few', 'is', 'she', 'other', 'has', 'each', 'it', 'about', 'they', \"hasn't\", \"shouldn't\", 'my', 'by'}\n","output_type":"stream"}]},{"cell_type":"code","source":"documents_cleaned[3898\n                 ]","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:12:56.561630Z","iopub.execute_input":"2024-10-07T05:12:56.562300Z","iopub.status.idle":"2024-10-07T05:12:56.571603Z","shell.execute_reply.started":"2024-10-07T05:12:56.562251Z","shell.execute_reply":"2024-10-07T05:12:56.570647Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"'james jolley , ( 1813-1892 ) , saddler , harnessmaker , politician .'"},"metadata":{}}]},{"cell_type":"code","source":"print(type(documents_cleaned))\n!pip install sentence_transformers\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:12:58.695272Z","iopub.execute_input":"2024-10-07T05:12:58.695683Z","iopub.status.idle":"2024-10-07T05:13:12.123240Z","shell.execute_reply.started":"2024-10-07T05:12:58.695645Z","shell.execute_reply":"2024-10-07T05:13:12.122196Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'list'>\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Collecting sentence_transformers\n  Downloading sentence_transformers-3.1.1-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: transformers<5.0.0,>=4.38.0 in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (4.45.1)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (4.66.4)\nRequirement already satisfied: torch>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (2.4.0)\nRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (1.2.2)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (1.14.1)\nRequirement already satisfied: huggingface-hub>=0.19.3 in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (0.25.1)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from sentence_transformers) (10.3.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (3.15.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (2024.6.1)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (6.0.2)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (2.32.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence_transformers) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence_transformers) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence_transformers) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence_transformers) (3.1.4)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence_transformers) (1.26.4)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence_transformers) (2024.5.15)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence_transformers) (0.4.5)\nRequirement already satisfied: tokenizers<0.21,>=0.20 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence_transformers) (0.20.0)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->sentence_transformers) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn->sentence_transformers) (3.5.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface-hub>=0.19.3->sentence_transformers) (3.1.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.11.0->sentence_transformers) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence_transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence_transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence_transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence_transformers) (2024.8.30)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.11.0->sentence_transformers) (1.3.0)\nDownloading sentence_transformers-3.1.1-py3-none-any.whl (245 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m245.3/245.3 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: sentence_transformers\nSuccessfully installed sentence_transformers-3.1.1\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\ndframe = pd.DataFrame(documents_cleaned,columns=['Text'])\ntype(dframe)\ndframe.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:13:12.125335Z","iopub.execute_input":"2024-10-07T05:13:12.125744Z","iopub.status.idle":"2024-10-07T05:13:12.150476Z","shell.execute_reply.started":"2024-10-07T05:13:12.125706Z","shell.execute_reply":"2024-10-07T05:13:12.149572Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"                                                Text\n0  moeller 's student-run newspaper , crusader , ...\n1  2008 , crusader first place , second-highest h...\n2  squire student literary journal features stori...\n3  paul keels - play-by-play announcer ohio state...\n4         joe uecker - ohio state senator ( r-66 ) .","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>moeller 's student-run newspaper , crusader , ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008 , crusader first place , second-highest h...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>squire student literary journal features stori...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>paul keels - play-by-play announcer ohio state...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>joe uecker - ohio state senator ( r-66 ) .</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"originalFrame = pd.DataFrame(dataread,columns=['Text'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install einops","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:13:14.346565Z","iopub.execute_input":"2024-10-07T05:13:14.347009Z","iopub.status.idle":"2024-10-07T05:13:26.242708Z","shell.execute_reply.started":"2024-10-07T05:13:14.346973Z","shell.execute_reply":"2024-10-07T05:13:26.241678Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Collecting einops\n  Downloading einops-0.8.0-py3-none-any.whl.metadata (12 kB)\nDownloading einops-0.8.0-py3-none-any.whl (43 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.2/43.2 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: einops\nSuccessfully installed einops-0.8.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer(\"nomic-ai/nomic-embed-text-v1.5\", device=\"cpu\", trust_remote_code=True)\nembeddings = model.encode(documents_cleaned)\nprint(embeddings)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:14:28.948139Z","iopub.execute_input":"2024-10-07T05:14:28.949013Z","iopub.status.idle":"2024-10-07T05:19:48.229176Z","shell.execute_reply.started":"2024-10-07T05:14:28.948971Z","shell.execute_reply":"2024-10-07T05:19:48.228145Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"modules.json:   0%|          | 0.00/255 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"812c7612b06d4be18ebde14088dd5d35"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config_sentence_transformers.json:   0%|          | 0.00/140 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"58f025351b9c41c38070822207d9c8de"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/71.2k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c0dd43e10404b459de1b1f9c1291477"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"sentence_bert_config.json:   0%|          | 0.00/120 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e4a096ca8fa74dc7b93f5f705628f299"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/2.06k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d289c2d55741420faf8c72aa95ab24f6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"configuration_hf_nomic_bert.py:   0%|          | 0.00/1.96k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af8e408833d04bf5b81ade2184db45a5"}},"metadata":{}},{"name":"stderr","text":"A new version of the following files was downloaded from https://huggingface.co/nomic-ai/nomic-bert-2048:\n- configuration_hf_nomic_bert.py\n. Make sure to double-check they do not contain any added malicious code. To avoid downloading new versions of the code file, you can pin a revision.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"modeling_hf_nomic_bert.py:   0%|          | 0.00/85.7k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4ffce49d00b346daaae384ef97056c00"}},"metadata":{}},{"name":"stderr","text":"A new version of the following files was downloaded from https://huggingface.co/nomic-ai/nomic-bert-2048:\n- modeling_hf_nomic_bert.py\n. Make sure to double-check they do not contain any added malicious code. To avoid downloading new versions of the code file, you can pin a revision.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/547M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"beefe4539a0e4034947a908e0daa0906"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.19k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7a722e5dd1004f56a3fc27950ec03168"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f624e9ad3fc643c7868984faecc9048f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/711k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9cc4921f60c642a284e9b29824462fb7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/695 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7ec6c6cbece64cfda067c3dc3f09c2d8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"1_Pooling/config.json:   0%|          | 0.00/286 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ca920297ab7040efacf688e7b983301f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/256 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6def9aa748c2498391087a5cd8a30849"}},"metadata":{}},{"name":"stdout","text":"[[ 0.21205117  0.3319345  -4.2008862  ... -1.1531382  -1.1332045\n   0.29530478]\n [ 0.14837462  0.11751884 -3.7233493  ... -0.5860732  -1.6906339\n  -0.5803129 ]\n [-0.5159184  -0.10887633 -3.4045713  ... -0.63912475 -1.021093\n  -0.52188593]\n ...\n [-0.41358325  0.6402554  -3.0558887  ... -1.0548445  -2.1498861\n  -0.14105916]\n [ 0.8508948   1.4332063  -3.5926683  ... -0.8295747  -1.3702956\n  -0.8426355 ]\n [ 0.54978883  0.76062155 -5.4668436  ... -0.8437768  -1.690157\n  -0.06907567]]\n","output_type":"stream"}]},{"cell_type":"code","source":"embeddings.shape","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:21:31.992490Z","iopub.execute_input":"2024-10-07T05:21:31.993586Z","iopub.status.idle":"2024-10-07T05:21:32.000939Z","shell.execute_reply.started":"2024-10-07T05:21:31.993533Z","shell.execute_reply":"2024-10-07T05:21:31.999919Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(8191, 768)"},"metadata":{}}]},{"cell_type":"code","source":"!pip install umap-learn","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:24:22.440550Z","iopub.execute_input":"2024-10-07T05:24:22.441003Z","iopub.status.idle":"2024-10-07T05:24:34.492335Z","shell.execute_reply.started":"2024-10-07T05:24:22.440956Z","shell.execute_reply":"2024-10-07T05:24:34.491299Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Collecting umap-learn\n  Downloading umap_learn-0.5.6-py3-none-any.whl.metadata (21 kB)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from umap-learn) (1.26.4)\nRequirement already satisfied: scipy>=1.3.1 in /opt/conda/lib/python3.10/site-packages (from umap-learn) (1.14.1)\nRequirement already satisfied: scikit-learn>=0.22 in /opt/conda/lib/python3.10/site-packages (from umap-learn) (1.2.2)\nRequirement already satisfied: numba>=0.51.2 in /opt/conda/lib/python3.10/site-packages (from umap-learn) (0.60.0)\nCollecting pynndescent>=0.5 (from umap-learn)\n  Downloading pynndescent-0.5.13-py3-none-any.whl.metadata (6.8 kB)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from umap-learn) (4.66.4)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.51.2->umap-learn) (0.43.0)\nRequirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.10/site-packages (from pynndescent>=0.5->umap-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.22->umap-learn) (3.5.0)\nDownloading umap_learn-0.5.6-py3-none-any.whl (85 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m85.7/85.7 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pynndescent-0.5.13-py3-none-any.whl (56 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.9/56.9 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: pynndescent, umap-learn\nSuccessfully installed pynndescent-0.5.13 umap-learn-0.5.6\n","output_type":"stream"}]},{"cell_type":"code","source":"import umap.umap_ as umap\nimport matplotlib.pyplot as plt\numap_reducer = umap.UMAP(n_neighbors=5, n_components=80, random_state=42)\nreduced_embeddings_umap = umap_reducer.fit_transform(embeddings)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:43:48.260132Z","iopub.execute_input":"2024-10-07T05:43:48.262295Z","iopub.status.idle":"2024-10-07T05:44:30.596202Z","shell.execute_reply.started":"2024-10-07T05:43:48.262243Z","shell.execute_reply":"2024-10-07T05:44:30.595093Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/umap/umap_.py:1945: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n  warn(f\"n_jobs value {self.n_jobs} overridden to 1 by setting random_state. Use no seed for parallelism.\")\n","output_type":"stream"}]},{"cell_type":"code","source":"input_dim = reduced_embeddings_umap.shape[1]\nencoding_dim = 5  # The reduced dimension size for the encoder output\n\n# Define the input layer for the autoencoder\ninput_layer = Input(shape=(input_dim,))\n# Encoder part\nencoder = Dense(encoding_dim, activation='tanh')(input_layer)\n# Decoder part\ndecoder = Dense(input_dim, activation='tanh')(encoder)\nautoencoder = Model(inputs=input_layer, outputs=decoder)\n\n# Compile the autoencoder\nautoencoder.compile(optimizer=Adam(), loss='mse')\n\n# Pre-train the autoencoder\nautoencoder.fit(reduced_embeddings_umap, reduced_embeddings_umap, epochs=100, batch_size=256, shuffle=True)\n\n# Extract the encoder part to get the reduced representations\nencoder_model = Model(inputs=input_layer, outputs=encoder)\n\n# Encode the embeddings using the trained encoder model\nencoded_embeddings = encoder_model.predict(reduced_embeddings_umap)\n\n# Perform KMeans clustering on the encoded embeddings\nkmeans = KMeans(n_clusters=150,init='k-means++',algorithm='full',max_iter=500)  # Set the number of clusters\ncluster_labels = kmeans.fit_predict(reduced_embeddings_umap)\n\n# Output the clustering results\nprint(f\"Cluster labels: {cluster_labels}\")\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.decomposition import PCA\nfrom tensorflow.keras.layers import Input, Dense\nfrom tensorflow.keras.models import Model\nfrom sklearn.cluster import KMeans\nfrom keras.optimizers import Adam\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:39:55.019588Z","iopub.execute_input":"2024-10-07T05:39:55.020325Z","iopub.status.idle":"2024-10-07T05:39:55.025628Z","shell.execute_reply.started":"2024-10-07T05:39:55.020283Z","shell.execute_reply":"2024-10-07T05:39:55.024536Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\npca = PCA(n_components=200)  \nreduced_embeddings = pca.fit_transform(embeddings)\n\nexplained_variance_ratio = pca.explained_variance_ratio_\ncumulative_variance = np.cumsum(explained_variance_ratio)\n\n# Plot the explained variance\nplt.figure(figsize=(10, 6))\nplt.bar(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio, alpha=0.5, align='center', label='Individual explained variance')\nplt.step(range(1, len(cumulative_variance) + 1), cumulative_variance, where='mid', label='Cumulative explained variance')\nplt.xlabel('Principal Component Index')\nplt.ylabel('Explained Variance Ratio')","metadata":{"execution":{"iopub.status.busy":"2024-10-06T15:43:58.630995Z","iopub.execute_input":"2024-10-06T15:43:58.631806Z","iopub.status.idle":"2024-10-06T15:44:00.529720Z","shell.execute_reply.started":"2024-10-06T15:43:58.631764Z","shell.execute_reply":"2024-10-06T15:44:00.528784Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'Explained Variance Ratio')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"input_dim = reduced_embeddings.shape[1]\nencoding_dim = 20  # The reduced dimension size for the encoder output\n\n# Define the input layer for the autoencoder\ninput_layer = Input(shape=(input_dim,))\n# Encoder part\nencoder = Dense(encoding_dim, activation='tanh')(input_layer)\n# Decoder part\ndecoder = Dense(input_dim, activation='tanh')(encoder)\nautoencoder = Model(inputs=input_layer, outputs=decoder)\n\n# Compile the autoencoder\nautoencoder.compile(optimizer=Adam(), loss='mse')\n\n# Pre-train the autoencoder\nautoencoder.fit(reduced_embeddings, reduced_embeddings, epochs=100, batch_size=256, shuffle=True)\n\n# Extract the encoder part to get the reduced representations\nencoder_model = Model(inputs=input_layer, outputs=encoder)\n\n# Encode the embeddings using the trained encoder model\nencoded_embeddings = encoder_model.predict(reduced_embeddings)\n\n# Perform KMeans clustering on the encoded embeddings\nkmeans = KMeans(n_clusters=200,init='k-means++',algorithm='full',max_iter=500)  # Set the number of clusters\ncluster_labels = kmeans.fit_predict(encoded_embeddings)\n\n# Output the clustering results\nprint(f\"Cluster labels: {cluster_labels}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T18:02:28.892038Z","iopub.execute_input":"2024-10-06T18:02:28.892418Z","iopub.status.idle":"2024-10-06T18:02:28.934767Z","shell.execute_reply.started":"2024-10-06T18:02:28.892380Z","shell.execute_reply":"2024-10-06T18:02:28.933538Z"},"trusted":true},"execution_count":4,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[4], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m input_dim \u001b[38;5;241m=\u001b[39m \u001b[43mreduced_embeddings\u001b[49m\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m      2\u001b[0m encoding_dim \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m20\u001b[39m  \u001b[38;5;66;03m# The reduced dimension size for the encoder output\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Define the input layer for the autoencoder\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'reduced_embeddings' is not defined"],"ename":"NameError","evalue":"name 'reduced_embeddings' is not defined","output_type":"error"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n\n# List to hold the WCSS values\nwcss = []\n\n# Range of cluster numbers to try (1 to 20 in this example)\ncluster_range = range(50, 300)\n\n# Run KMeans for each number of clusters and calculate WCSS\nfor n_clusters in cluster_range:\n    kmeans = KMeans(n_clusters=n_clusters, init='k-means++', algorithm='full', max_iter=500, random_state=42)\n    kmeans.fit(encoded_embeddings)\n    \n    # Append the WCSS (sum of squared distances to the closest cluster center) to the list\n    wcss.append(kmeans.inertia_)\n\n# Plot the elbow curve\nplt.figure(figsize=(10, 6))\nplt.plot(cluster_range, wcss, marker='o', linestyle='--')\nplt.title('Elbow Method for Optimal Number of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('WCSS')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T18:02:25.542323Z","iopub.execute_input":"2024-10-06T18:02:25.542711Z","iopub.status.idle":"2024-10-06T18:02:26.401662Z","shell.execute_reply.started":"2024-10-06T18:02:25.542673Z","shell.execute_reply":"2024-10-06T18:02:26.400396Z"},"trusted":true},"execution_count":3,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 14\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m n_clusters \u001b[38;5;129;01min\u001b[39;00m cluster_range:\n\u001b[1;32m     13\u001b[0m     kmeans \u001b[38;5;241m=\u001b[39m KMeans(n_clusters\u001b[38;5;241m=\u001b[39mn_clusters, init\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mk-means++\u001b[39m\u001b[38;5;124m'\u001b[39m, algorithm\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfull\u001b[39m\u001b[38;5;124m'\u001b[39m, max_iter\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m500\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[0;32m---> 14\u001b[0m     kmeans\u001b[38;5;241m.\u001b[39mfit(\u001b[43mencoded_embeddings\u001b[49m)\n\u001b[1;32m     16\u001b[0m     \u001b[38;5;66;03m# Append the WCSS (sum of squared distances to the closest cluster center) to the list\u001b[39;00m\n\u001b[1;32m     17\u001b[0m     wcss\u001b[38;5;241m.\u001b[39mappend(kmeans\u001b[38;5;241m.\u001b[39minertia_)\n","\u001b[0;31mNameError\u001b[0m: name 'encoded_embeddings' is not defined"],"ename":"NameError","evalue":"name 'encoded_embeddings' is not defined","output_type":"error"}]},{"cell_type":"code","source":"print(len(cluster_labels))\nprint(len(documents_cleaned))\nprint(max(cluster_labels))","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:45:47.226606Z","iopub.execute_input":"2024-10-07T05:45:47.227001Z","iopub.status.idle":"2024-10-07T05:45:47.233695Z","shell.execute_reply.started":"2024-10-07T05:45:47.226963Z","shell.execute_reply":"2024-10-07T05:45:47.232755Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"8191\n8191\n149\n","output_type":"stream"}]},{"cell_type":"code","source":"dframe[\"Cluster\"] = cluster_labels\ncluster_0 = []\n# Assuming the DataFrame has 234 rows and 'Text' is the column with your text data\nfor i in range(len(documents_cleaned)):\n    if dframe.Cluster[i] == 130:  # Check if the cluster label for the current row is 4\n        cluster_0.append(dframe.Text[i])  # Append the corresponding text to the list\n\n# Output or further process the text data for cluster 4\nprint(cluster_0)","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:50:17.127365Z","iopub.execute_input":"2024-10-07T05:50:17.128171Z","iopub.status.idle":"2024-10-07T05:50:17.288391Z","shell.execute_reply.started":"2024-10-07T05:50:17.128126Z","shell.execute_reply":"2024-10-07T05:50:17.287386Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"[\"moeller 's student-run newspaper , crusader , consistently recognized one top region .\", '2008 , crusader first place , second-highest honor high school newspaper receive american scholastic press association .', 'squire student literary journal features stories , poems , essays written moeller students .', 'archbishop moeller high school established fall 1958 archbishop karl j. alter appointed monsignor edward a. mccarthy brother paul sibbing , s.m. , supervise planning construction new high school near montgomery , ohio .', 'moeller high school opened doors september 1960 , along la salle high school , fellow cincinnati archdiocesan school .', 'opened doors 1960 , moeller high school received students 15 parishes northeastern part greater cincinnati area , drawing roger bacon high school purcell marian high school , two all-male comprehensive cincinnati archdiocesan schools .', 'starting freshman class 1999 , moeller high school adopted new laptop program .', 'moeller art program nationally recognized four-year program culminates advanced placement studio art art history .', 'moeller crusaders long history athletic success .', \"moeller high school 's athletic teams - exception boxing , lacrosse , skiing , volleyball - sanctioned ohio high school athletic association ( ohsaa ) compete greater catholic league south , along elder , st. xavier la salle high schools .\", \"recently , moeller unveiled plans build multipurpose stadium campus ( named gerry faust athletic complex 8-foot bronze statue honoring entrance ) ; however , plan faced strong criticism neighboring homeowners , moeller 's request change zoning regulation denied .\", \"2007 title went second team ohio high school boys ' volleyball history go undefeated .\", '1807 grammar school act allowed government take various grammar schools across province incorporating network eight new , public grammar schools ( secondary schools ) , one eight districts ( eastern , johnstown , midland , newcastle , home , niagara , london , western ) .', 'home district grammar school york , upper canada , later becoming royal grammar school , toronto high school finally current name jarvis collegiate institute .', 'united states canada , educational zones centered one denominational institutions higher education .', 'mount madonna institute college ayurveda yoga .', '1827 - establishment first gujarati school .', '1846 - starting first english school .', '1881 - b.j . medical college started near gheekanta .', 'humphrey chetham purchased old college buildings civil war , endowed bluecoat school .', 'presbyterian church ( pcusa ) established presbyterian mission day school , one-story building would become 4th street boston avenue 1884 .', 'tulsa built first two public schools 1905 .', 'tulsa high school opened 1906 block formerly occupied presbyterian mission school , razed .', 'three primary public school districts city tulsa .', 'variety independent sectarian schools exist tulsa , also .', 'first institute higher education established tulsa kendall college , presbyterian school , moved muskogee tulsa 1907 .', 'numerous private primary high schools besides state schools region .', 'quarter jobs available city health education sector .', 'city strong higher education sector .', \"also independent schools , including gregg school , king edward vi school st mary 's college .\", 'national trust holds regular lectures diverse range subjects junior school recreation ground road .', 'school existence 1521', 'whitgift school near croydon aerodrome .', 'meghalaya schools run state government private organisations , including religious institutions .', '10+2+3 plan , completing secondary school , students typically enroll two years junior college , also known pre-university , schools higher secondary facility affiliated meghalaya board school education central board .', 'institutes like indian institute management , shillong , regional institute science technology , north eastern indira gandhi regional institute health medical sciences , national institute technology , meghalaya , indian institute professional studies , national institute fashion technology also present .', 'research-oriented medical school affiliates siriraj , king chulalongkorn memorial ramathibodi hospitals among largest country , act tertiary care centres , receiving referrals distant parts country .', 'hamilton board education resumed ambitious building program schools .', 'higher education-disregarding normal school teachers college-arrived hamilton 1930 .', 'may 2013 voters approved funding new center school feasibility study .', 'rural areas faced many difficulties opening maintaining public schools .', 'many international american schools scattered across europe ash ( american international school hague ) rotterdam also international/american school name aisr ( american international school rotterdam ) .', 'university nevada , reno oldest university state nevada nevada system higher education .', 'truckee meadows community college ( tmcc ) regionally accredited , two-year institution part nevada system higher education .', 'university phoenix - northern nevada campus located south reno .', 'nevada school law old college reno first law school established state nevada .', 'reno private elementary schools legacy christian school , excel christian school , lamplight christian school , coral academy science , nevada sage waldorf school well private high schools , largest bishop manogue high school sage ridge school .', \"master plan school 's physical growth development-created 1912 significantly revised 1952 , 1965 , 1991-saw two revisions clough 's guidance 1997 2002 .\", \"school also taken care maintain historic district , several projects dedicated preservation improvement tech tower , school 's first oldest building primary administrative center .\", 'crecine instrumental securing 1996 summer olympics atlanta .', \"atlanta olympics bid , dramatic amount construction occurred , creating considered `` west campus '' order tech serve olympic village .\", 'governor mcdaniel appointed commission january 1886 organize run school .', \"school 's new location bounded south north avenue , west cherry street .\", 'two middle schools pupils 9 13 years age , oakfield middle school selwood anglican/methodist middle school .', 'later 1970s schools built communities go beyond grade 7/8 .', 'nwt aurora college arctic college nunavut offer education programs throughout territories .', 'university interscholastic league ( uil ) organizes primary secondary school competitions .', 'town home computer science campus staffordshire university along beaconside campus used house faculty computing engineering technology part business school closed transferred stoke-on-trent .', 'chetwynd centre also provides higher education town .', 'stafford college large college education .', 'south staffordshire college base village rodbaston , edge stafford .', 'staffordshire university large campus east town focuses heavily computing , engineering media technologies ( film , music computer games ) .', 'cornwall collegiate vocational school became grade 7-12 school amalgamating general vanier intermediate school 2011-12 school year .', \"st. joseph 's secondary school part catholic district board offers french immersion education .\", 'saint lawrence secondary school hosts students grade 7-12 .', 'al-rashid islamic institute first islamic school kind north america , providing higher educations islamic studies boarding facility .', 'always diligent student , end first year blackrock college student year .', 'preservation founding denominational schools .']\n","output_type":"stream"}]},{"cell_type":"code","source":"dframe[\"Cluster\"] = cluster_labels\ncluster_1 = []\n# Assuming the DataFrame has 234 rows and 'Text' is the column with your text data\nfor i in range(len(documents_cleaned)):\n    if dframe.Cluster[i] == 2:  # Check if the cluster label for the current row is 4\n        cluster_1.append(dframe.Text[i])  # Append the corresponding text to the list\n\n# Output or further process the text data for cluster 4\nprint(cluster_1)","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:47:46.177739Z","iopub.execute_input":"2024-10-07T05:47:46.178498Z","iopub.status.idle":"2024-10-07T05:47:46.338136Z","shell.execute_reply.started":"2024-10-07T05:47:46.178458Z","shell.execute_reply":"2024-10-07T05:47:46.337149Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"['hospital deal hundreds wounded people - sixteen eighty day , three quarters civilians , second half september .', 'numerous disasters befell city .', 'according oklahoma city memorial institute prevention terrorism ( mipt ) , 300 buildings damaged .', '1819 - rann kutch earthquake', '1821 - earthquake 30 seconds .', '2001 - earthquake republic day ( near bhuj ) creates major damage across western part city , leaving 750 dead 4000 injured , many residents tall buildings .', 'destruction twin towers world trade center september 11 terrorist attacks , new trade center designed , main tower designed david childs som .', '11.20 saturday 15 june 1996 , ira detonated large bomb city centre , largest detonated british soil .', 'eighteen men killed crash u.s. navy blimp coast barnegat light , new jersey .', 'u.s. navy c-47 cargo transport plane crashed side mountain near quito , ecuador , killing 18 persons board .', 'thirty-three iron miners west germany killed mine fire near salzgitter .', 'two u.s. navy destroyers , , collided coast newport beach , california , killing ten sailors .', '630 people lost lives result air raids southampton nearly 2,000 injured , mention thousands buildings damaged destroyed .', 'say later , `` got trouble saying knock-back characteristic malaise country suffering , got headline .', '60 people killed train crash jamaica .', '6 jews killed another day violence palestine .', 'least 34 people killed bogotá , colombia stunt plane crashed crowd watching inauguration new airfield .', 'bomb explosion killed 43 arabs crowded market haifa .', \"fourth anniversary july putsch marked vienna day `` national pride '' .\", 'munitions factory taíno , lombardy , italy exploded , killing 33 .', 'participants on-to-ottawa trek clashed police regina , saskatchewan , resulting death 1 officer , 45 injuries 130 arrests .', 'new york harbor , hundreds communist demonstrators stormed ss bremen , tore nazi swastika flag foremast threw hudson river .', 'nazis attacked jews along kurfürstendamm berlin .', 'mining disaster lengede , germany killed 10 injured 30 .', '37 died flooding new york state .', 'aerolíneas argentinas dc-6 airplane crashed flying buenos aires comodoro rivadavia , killing 67 persons board .', 'czechoslovakian airlines ilyushin-18 turboprop airplane crashed attempting make landing casablanca , morocco , killing 72 persons board .', 'eight people killed lightning struck tobacco curing barn clinton , north carolina , taken shelter storm .', \"alleged `` unexplained incident '' said occurred shreveport , louisiana , peaches `` fell sky '' group carpenters roofing house .\", 'series explosions portuguese ship save killed 237 people board , running aground sandbar mozambique .', 'british government agreed pay government san marino sum 732,000,000 italian lira ( 80,000 british pounds , time us $ 224,000 ) compensation erroneous bombing republic june 26 , 1944 , british raid italy .', 'ústí massacre ethnic germans northern bohemian city ústí nad labem occurred .', 'february 2008 , earthquake swarm began occur , lasting several months , largest quake registering 4.9 richter magnitude scale , although geologic estimates put 5.0 .', 'disaster occurred afternoon february 5 , 1957 , explosion ripped heart downtown .', '1990s students , trade unionists , workers often demonstrated express discontent government .', '9 december 1997 national strike paralysed country .', 'sixteen miners killed six injured explosion osterfeld colliery near oberhausen germany .', 'city point tupper , nova scotia destroyed fire .', 'dynamite explosion rancagua , chile , killed 38 people .', 'large fire 1997 destroyed one third fair , burnt 100,000 books caused death visitor ( jiten seal ) , suffered heart attack brought ensuing stampede .', 'following devastating fire 1997 , food stalls also shared common enclave .', 'november 22 , 1963 , president john f. kennedy assassinated dallas .', 'year original dedication , lightning storm caused extensive damage original tower .', 'scheme cost £2.6 million .', 'april 14 , 2005 , united states geological survey released map detailing results new tool measures ground shaking earthquake .', 'october 1 , 1969 , two earthquakes magnitudes 5.6 5.7 shook santa rosa , damaging 100 structures .', \"1906 san francisco earthquake essentially destroyed entire downtown , city 's population greatly suffer .\", 'late 1980s , dissenting intellectuals formed political organizations express grievances .', 'march 2004 , another wave attacks shook country .', 'july 30 , 2004 , terrorists bombed embassies israel united states tashkent , killing three people wounding several .', '1944 , city rocked magnitude 5.8 earthquake however , deaths injuries reported several chimneys destroyed damaged , along heavy damage masonry structures .', 'sunday 22 february 2015 , terrorist bomb attack march commemorate people died euromaidan protests 2014 .']\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install keybert","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:05:21.872404Z","iopub.execute_input":"2024-10-07T07:05:21.873271Z","iopub.status.idle":"2024-10-07T07:05:34.046824Z","shell.execute_reply.started":"2024-10-07T07:05:21.873226Z","shell.execute_reply":"2024-10-07T07:05:34.045568Z"},"trusted":true},"execution_count":81,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Collecting keybert\n  Downloading keybert-0.8.5-py3-none-any.whl.metadata (15 kB)\nRequirement already satisfied: numpy>=1.18.5 in /opt/conda/lib/python3.10/site-packages (from keybert) (1.26.4)\nRequirement already satisfied: rich>=10.4.0 in /opt/conda/lib/python3.10/site-packages (from keybert) (13.7.1)\nRequirement already satisfied: scikit-learn>=0.22.2 in /opt/conda/lib/python3.10/site-packages (from keybert) (1.2.2)\nRequirement already satisfied: sentence-transformers>=0.3.8 in /opt/conda/lib/python3.10/site-packages (from keybert) (3.1.1)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.4.0->keybert) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich>=10.4.0->keybert) (2.18.0)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.22.2->keybert) (1.14.1)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.22.2->keybert) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.22.2->keybert) (3.5.0)\nRequirement already satisfied: transformers<5.0.0,>=4.38.0 in /opt/conda/lib/python3.10/site-packages (from sentence-transformers>=0.3.8->keybert) (4.45.1)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from sentence-transformers>=0.3.8->keybert) (4.66.4)\nRequirement already satisfied: torch>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from sentence-transformers>=0.3.8->keybert) (2.4.0)\nRequirement already satisfied: huggingface-hub>=0.19.3 in /opt/conda/lib/python3.10/site-packages (from sentence-transformers>=0.3.8->keybert) (0.25.1)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from sentence-transformers>=0.3.8->keybert) (10.3.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (3.15.1)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (2024.6.1)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (6.0.2)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (2.32.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (4.12.2)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich>=10.4.0->keybert) (0.1.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence-transformers>=0.3.8->keybert) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence-transformers>=0.3.8->keybert) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.11.0->sentence-transformers>=0.3.8->keybert) (3.1.4)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence-transformers>=0.3.8->keybert) (2024.5.15)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence-transformers>=0.3.8->keybert) (0.4.5)\nRequirement already satisfied: tokenizers<0.21,>=0.20 in /opt/conda/lib/python3.10/site-packages (from transformers<5.0.0,>=4.38.0->sentence-transformers>=0.3.8->keybert) (0.20.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (3.1.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.11.0->sentence-transformers>=0.3.8->keybert) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub>=0.19.3->sentence-transformers>=0.3.8->keybert) (2024.8.30)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.11.0->sentence-transformers>=0.3.8->keybert) (1.3.0)\nDownloading keybert-0.8.5-py3-none-any.whl (37 kB)\nInstalling collected packages: keybert\nSuccessfully installed keybert-0.8.5\n","output_type":"stream"}]},{"cell_type":"code","source":"# Initialize KeyBERT with a pre-trained model\nkw_model = KeyBERT('all-MiniLM-L6-v2')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(max_features=15,smooth_idf=True,stop_words='english')\nX = vectorizer.fit_transform(cluster_0)\n\nterms0 = vectorizer.get_feature_names_out()\nprint(terms0)\n\n\nfrom keybert import KeyBERT\n\n\n\n# Extract keywords from a document\nkeywords = kw_model.extract_keywords(','.join(cluster_0), top_n=15)\nprint([keyword[0] for keyword in keywords])\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:12:43.145975Z","iopub.execute_input":"2024-10-07T07:12:43.146363Z","iopub.status.idle":"2024-10-07T07:12:43.300904Z","shell.execute_reply.started":"2024-10-07T07:12:43.146327Z","shell.execute_reply":"2024-10-07T07:12:43.299551Z"},"trusted":true},"execution_count":98,"outputs":[{"name":"stdout","text":"['campus' 'college' 'education' 'grammar' 'high' 'higher' 'institute'\n 'moeller' 'nevada' 'school' 'schools' 'secondary' 'tulsa' 'university'\n 'year']\n['moeller', 'salle', 'enroll', 'schools', 'accredited', '1881', 'archbishop', 'academy', 'ohio', 'university', 'freshman', 'scholastic', 'campus', 'high', 'collegiate']\n","output_type":"stream"}]},{"cell_type":"code","source":"(', ').join(terms1)","metadata":{"execution":{"iopub.status.busy":"2024-10-06T15:24:36.544241Z","iopub.execute_input":"2024-10-06T15:24:36.544636Z","iopub.status.idle":"2024-10-06T15:24:36.551085Z","shell.execute_reply.started":"2024-10-06T15:24:36.544597Z","shell.execute_reply":"2024-10-06T15:24:36.550071Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"'2010, bay, canada, city, cnbc, company, economy, financial, hamilton, home, known, lake, manitoba, nuclear, oil, portage, service, united, war, water'"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(max_features=30,smooth_idf = True)\nX = vectorizer.fit_transform(cluster_1)\n\n\nterms1 = vectorizer.get_feature_names_out()\nprint(terms1)\n\nkeywords = kw_model.extract_keywords(','.join(cluster_1), top_n=15)\nprint([keyword[0] for keyword in keywords])","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:16:21.253693Z","iopub.execute_input":"2024-10-07T07:16:21.254644Z","iopub.status.idle":"2024-10-07T07:16:21.392006Z","shell.execute_reply.started":"2024-10-07T07:16:21.254580Z","shell.execute_reply":"2024-10-07T07:16:21.390417Z"},"trusted":true},"execution_count":99,"outputs":[{"name":"stdout","text":"['000' 'board' 'bomb' 'british' 'buildings' 'city' 'country' 'crashed'\n 'damage' 'damaged' 'day' 'destroyed' 'earthquake' 'explosion' 'february'\n 'fire' 'germany' 'government' 'injured' 'killed' 'killing' 'navy' 'near'\n 'new' 'occurred' 'people' 'persons' 'several' 'three' 'trade']\n['bombed', 'earthquake', 'disasters', 'earthquakes', 'explosion', 'detonated', 'exploded', 'disaster', 'bombing', 'explosions', 'devastating', 'munitions', 'quake', 'crash', 'towers']\n","output_type":"stream"}]},{"cell_type":"code","source":"dframe","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:17:37.457039Z","iopub.execute_input":"2024-10-07T07:17:37.457858Z","iopub.status.idle":"2024-10-07T07:17:37.469741Z","shell.execute_reply.started":"2024-10-07T07:17:37.457817Z","shell.execute_reply":"2024-10-07T07:17:37.468767Z"},"trusted":true},"execution_count":101,"outputs":[{"execution_count":101,"output_type":"execute_result","data":{"text/plain":"                                                   Text  Cluster  \\\n0     moeller 's student-run newspaper , crusader , ...      130   \n1     2008 , crusader first place , second-highest h...      130   \n2     squire student literary journal features stori...      130   \n3     paul keels - play-by-play announcer ohio state...      140   \n4            joe uecker - ohio state senator ( r-66 ) .       23   \n...                                                 ...      ...   \n8186  galiev 's ideas would attacked late 1920s anti...       89   \n8187  volga basin subject periodic droughts sometime...       74   \n8188  patriarch tikhon made appeal world community r...      112   \n8189  lenin ordered precious metals , precious stone...       89   \n8190                                                         137   \n\n                                           top_words representative_term  \n0          school, schools, college, education, high                high  \n1          school, schools, college, education, high                high  \n2          school, schools, college, education, high                high  \n3             reno, host, basketball, kalamazoo, new                reno  \n4     reconstruction, freedmen, south, states, state               state  \n...                                              ...                 ...  \n8186         soviet, russian, russia, central, union             russian  \n8187      average, climate, summer, winter, rainfall             average  \n8188        moscow, russia, jewish, russian, kharkiv              kharki  \n8189         soviet, russian, russia, central, union             russian  \n8190      tip, featuring, produced, remix, performed             remixes  \n\n[8191 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Text</th>\n      <th>Cluster</th>\n      <th>top_words</th>\n      <th>representative_term</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>moeller 's student-run newspaper , crusader , ...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008 , crusader first place , second-highest h...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>squire student literary journal features stori...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>paul keels - play-by-play announcer ohio state...</td>\n      <td>140</td>\n      <td>reno, host, basketball, kalamazoo, new</td>\n      <td>reno</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>joe uecker - ohio state senator ( r-66 ) .</td>\n      <td>23</td>\n      <td>reconstruction, freedmen, south, states, state</td>\n      <td>state</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8186</th>\n      <td>galiev 's ideas would attacked late 1920s anti...</td>\n      <td>89</td>\n      <td>soviet, russian, russia, central, union</td>\n      <td>russian</td>\n    </tr>\n    <tr>\n      <th>8187</th>\n      <td>volga basin subject periodic droughts sometime...</td>\n      <td>74</td>\n      <td>average, climate, summer, winter, rainfall</td>\n      <td>average</td>\n    </tr>\n    <tr>\n      <th>8188</th>\n      <td>patriarch tikhon made appeal world community r...</td>\n      <td>112</td>\n      <td>moscow, russia, jewish, russian, kharkiv</td>\n      <td>kharki</td>\n    </tr>\n    <tr>\n      <th>8189</th>\n      <td>lenin ordered precious metals , precious stone...</td>\n      <td>89</td>\n      <td>soviet, russian, russia, central, union</td>\n      <td>russian</td>\n    </tr>\n    <tr>\n      <th>8190</th>\n      <td></td>\n      <td>137</td>\n      <td>tip, featuring, produced, remix, performed</td>\n      <td>remixes</td>\n    </tr>\n  </tbody>\n</table>\n<p>8191 rows × 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd\n\n# Assuming your data is in a DataFrame 'dframe' with 'Text' and 'Cluster' columns\n\n# Initialize the TF-IDF Vectorizer with a fixed number of features\nvectorizer = TfidfVectorizer(max_features=20)  # Adjust max_features as needed\n\n# Get the unique clusters\nclusters = dframe['Cluster'].unique()\n\n# Store top words for each cluster\ntop_words_per_cluster = {}\n\n# Iterate through each cluster and compute top words\nfor cluster in clusters:\n    # Select only the rows corresponding to the current cluster\n    cluster_data = dframe[dframe['Cluster'] == cluster]\n    \n    # Fit and transform the vectorizer on the cluster data\n    tfidf_cluster = vectorizer.fit_transform(cluster_data['Text'])\n    \n    # Get the feature names (words)\n    words = vectorizer.get_feature_names_out()\n    \n    # Sum the TF-IDF scores for each word across all documents in the cluster\n    tfidf_sums = tfidf_cluster.toarray().sum(axis=0)\n    \n    # Sort words by their TF-IDF score and take the top 5 (or desired number)\n    top_word_indices = tfidf_sums.argsort()[::-1][:5]  # Get indices of the top words\n    top_words = words[top_word_indices]\n    \n    # Store the top words for the current cluster\n    top_words_per_cluster[cluster] = top_words\n\n# Map the top words back to the dataframe\ndframe['top_words'] = dframe['Cluster'].map(lambda x: ', '.join(top_words_per_cluster[x]))\n\n# Display the DataFrame with the new 'top_words' column\nprint(dframe[['Text','Cluster', 'top_words']])\n","metadata":{"execution":{"iopub.status.busy":"2024-10-07T05:53:27.707816Z","iopub.execute_input":"2024-10-07T05:53:27.708732Z","iopub.status.idle":"2024-10-07T05:53:28.374374Z","shell.execute_reply.started":"2024-10-07T05:53:27.708690Z","shell.execute_reply":"2024-10-07T05:53:28.373493Z"},"trusted":true},"execution_count":69,"outputs":[{"name":"stdout","text":"                                                   Text  Cluster  \\\n0     moeller 's student-run newspaper , crusader , ...      130   \n1     2008 , crusader first place , second-highest h...      130   \n2     squire student literary journal features stori...      130   \n3     paul keels - play-by-play announcer ohio state...      140   \n4            joe uecker - ohio state senator ( r-66 ) .       23   \n...                                                 ...      ...   \n8186  galiev 's ideas would attacked late 1920s anti...       89   \n8187  volga basin subject periodic droughts sometime...       74   \n8188  patriarch tikhon made appeal world community r...      112   \n8189  lenin ordered precious metals , precious stone...       89   \n8190                                                         137   \n\n                                           top_words  \n0          school, schools, college, education, high  \n1          school, schools, college, education, high  \n2          school, schools, college, education, high  \n3             reno, host, basketball, kalamazoo, new  \n4     reconstruction, freedmen, south, states, state  \n...                                              ...  \n8186         soviet, russian, russia, central, union  \n8187      average, climate, summer, winter, rainfall  \n8188        moscow, russia, jewish, russian, kharkiv  \n8189         soviet, russian, russia, central, union  \n8190      tip, featuring, produced, remix, performed  \n\n[8191 rows x 3 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"clusters = dframe['Cluster'].unique()\n\n# Store top words for each cluster\ntop_words_per_cluster = {}\n\n# Iterate through each cluster and compute top words using KeyBERT\nfor cluster in clusters:\n    # Select only the rows corresponding to the current cluster\n    cluster_data = dframe[dframe['Cluster'] == cluster]['Text']\n    \n    # Combine all text in the cluster into a single string for keyword extraction\n    combined_text = ' '.join(cluster_data)\n    \n    # Extract the top 5 keywords using KeyBERT\n    keywords = kw_model.extract_keywords(combined_text, keyphrase_ngram_range=(1, 2), top_n=10)\n    \n    # Get only the keyword texts\n    top_words = [keyword[0] for keyword in keywords]\n    \n    # Store the top words for the current cluster\n    top_words_per_cluster[cluster] = top_words\n\n# Map the top words back to the dataframe\ndframe['top_words_BERT'] = dframe['Cluster'].map(lambda x: ', '.join(top_words_per_cluster[x]))\n\n# Display the DataFrame with the new 'top_words' column\nprint(dframe[['Text', 'Cluster', 'top_words_BERT']])","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:31:35.317988Z","iopub.execute_input":"2024-10-07T07:31:35.318410Z","iopub.status.idle":"2024-10-07T07:32:23.449506Z","shell.execute_reply.started":"2024-10-07T07:31:35.318369Z","shell.execute_reply":"2024-10-07T07:32:23.448175Z"},"trusted":true},"execution_count":111,"outputs":[{"name":"stdout","text":"                                                   Text  Cluster  \\\n0     moeller 's student-run newspaper , crusader , ...      130   \n1     2008 , crusader first place , second-highest h...      130   \n2     squire student literary journal features stori...      130   \n3     paul keels - play-by-play announcer ohio state...      140   \n4            joe uecker - ohio state senator ( r-66 ) .       23   \n...                                                 ...      ...   \n8186  galiev 's ideas would attacked late 1920s anti...       89   \n8187  volga basin subject periodic droughts sometime...       74   \n8188  patriarch tikhon made appeal world community r...      112   \n8189  lenin ordered precious metals , precious stone...       89   \n8190                                                         137   \n\n                                         top_words_BERT  \n0     moeller high, moeller students, ohio moeller, ...  \n1     moeller high, moeller students, ohio moeller, ...  \n2     moeller high, moeller students, ohio moeller, ...  \n3     basketball reno, basketball wbns, basketball t...  \n4     1868 republicans, 1866 senator, 1866 democrati...  \n...                                                 ...  \n8186  soviet union, khrushchev outline, soviet occup...  \n8187  winter moscow, average moscow, moscow cold, te...  \n8188  1917 vladimir, battle moscow, invaded russia, ...  \n8189  soviet union, khrushchev outline, soviet occup...  \n8190  tip remix, tip songs, remix featuring, remix p...  \n\n[8191 rows x 3 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"dframe.to_csv('final_output.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:34:39.788559Z","iopub.execute_input":"2024-10-07T07:34:39.789015Z","iopub.status.idle":"2024-10-07T07:34:39.914603Z","shell.execute_reply.started":"2024-10-07T07:34:39.788974Z","shell.execute_reply":"2024-10-07T07:34:39.913650Z"},"trusted":true},"execution_count":114,"outputs":[]},{"cell_type":"code","source":"from transformers import GPT2LMHeadModel, GPT2Tokenizer\nimport pandas as pd\n\n# Load the pre-trained GPT-2 model and tokenizer from Hugging Face\nmodel_name = \"gpt2\"  # Replace with other models like 'gpt2-large' or 'EleutherAI/gpt-neo-1.3B' for better results\ntokenizer = GPT2Tokenizer.from_pretrained(model_name)\nmodel = GPT2LMHeadModel.from_pretrained(model_name)\n\n# Function to generate a representative term for each set of top words using GPT-2\ndef generate_representative_term(text):\n    prompt = f\"Provide a single, concise representative term or label for the following words and just give me the term and nothing else: {text}.\"\n    inputs = tokenizer.encode(prompt, return_tensors=\"pt\")\n    outputs = model.generate(\n        inputs, \n        max_length=50,  # Adjust to control the length of the output\n        num_return_sequences=1, \n        temperature=0.3,  # Lower for more deterministic output\n        top_k=50  # Controls randomness; lower values make it more deterministic\n    )\n    # Decode the output and return as a string\n    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n    # Extract only the generated term after the prompt\n    generated_term = generated_text.replace(prompt, \"\").strip()\n    return generated_term\n\n# Apply the function to each row in the 'top_words' column\ndframe['representative_termGPT2'] = dframe['top_words'].apply(generate_representative_term)\n\n# Display the resulting DataFrame with the new 'representative_term' column\nprint(dframe[['top_words', 'representative_termGPT2']])\n\n# Optionally save the updated DataFrame to a CSV\ndframe.to_csv('top_words_with_representative_terms.csv', index=False)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = f\"Generate a single representative term or label for these words for a chatbot or organizational routing system : school, schools, college, education, high \"\nresult = summarizer(prompt, max_length=5, num_return_sequences=1)\nprint(result[0])","metadata":{"execution":{"iopub.status.busy":"2024-10-07T06:14:55.934947Z","iopub.execute_input":"2024-10-07T06:14:55.935382Z","iopub.status.idle":"2024-10-07T06:14:56.026756Z","shell.execute_reply.started":"2024-10-07T06:14:55.935343Z","shell.execute_reply":"2024-10-07T06:14:56.025848Z"},"trusted":true},"execution_count":73,"outputs":[{"name":"stdout","text":"{'generated_text': 'school'}\n","output_type":"stream"}]},{"cell_type":"code","source":"\nsummarizer = pipeline(\"text2text-generation\", model=\"google/flan-t5-small\")  # Choose an appropriate model\n\n# Function to generate a representative term for each set of top words\ndef generate_representative_term(text):\n    prompt = f\"Provide a single representative term or label for these words: {text}\"\n    result = summarizer(prompt, max_length=5, num_return_sequences=1)\n    return result[0]['generated_text']\n\n# Apply the function to each row in the 'top_words' column\ndframe['representative_term'] = dframe['top_words'].apply(generate_representative_term)\n\n# Display the resulting DataFrame with the new 'representative_term' column\nprint(dframe[['top_words', 'representative_term']])\n\n# Optionally save the updated DataFrame to a CSV\n#dframe.to_csv('top_words_with_representative_terms.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Convert 'dataread' to DataFrame if it is a list\nif isinstance(dataread, list):\n    dataread = pd.DataFrame(dataread)\n\n# Convert 'dframe' to DataFrame if it is a list\nif isinstance(dframe, list):\n    dframe = pd.DataFrame(dframe)\n\n# Ensure that 'Cluster' column exists in dframe and dataread has the same length\nif \"Cluster\" in dframe.columns:\n    # Assign the 'Cluster_id' column from dframe to dataread\n    dataread[\"Cluster_id\"] = dframe[\"Cluster\"]\nelse:\n    print(\"Column 'Cluster' not found in dframe\")\n\n# Check the updated DataFrame\nprint(dataread.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:46:35.262150Z","iopub.execute_input":"2024-10-06T10:46:35.262982Z","iopub.status.idle":"2024-10-06T10:46:35.274312Z","shell.execute_reply.started":"2024-10-06T10:46:35.262938Z","shell.execute_reply":"2024-10-06T10:46:35.273206Z"},"trusted":true},"execution_count":356,"outputs":[{"name":"stdout","text":"                                                   0  Cluster_id\n0  Moeller's student-run newspaper, The Crusader,...         437\n1  In 2008, The Crusader won First Place, the sec...         209\n2  The Squire is a student literary journal that ...         106\n3  Paul Keels - play-by-play announcer for Ohio S...         459\n4         Joe Uecker - Ohio State Senator (R-66) .\\n          93\n","output_type":"stream"}]},{"cell_type":"code","source":"cluster_tokens = []  # Initialize an empty list\nfor i in range(499):\n    cluster_tokens.append(cluster_groups[\"Text_Tokens\"][i][0])  # Append the value\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T11:15:24.725319Z","iopub.execute_input":"2024-10-06T11:15:24.726056Z","iopub.status.idle":"2024-10-06T11:15:24.735723Z","shell.execute_reply.started":"2024-10-06T11:15:24.726013Z","shell.execute_reply":"2024-10-06T11:15:24.734749Z"},"trusted":true},"execution_count":388,"outputs":[]},{"cell_type":"code","source":"dframe","metadata":{"execution":{"iopub.status.busy":"2024-10-07T07:12:13.918498Z","iopub.execute_input":"2024-10-07T07:12:13.919464Z","iopub.status.idle":"2024-10-07T07:12:13.932988Z","shell.execute_reply.started":"2024-10-07T07:12:13.919423Z","shell.execute_reply":"2024-10-07T07:12:13.931943Z"},"trusted":true},"execution_count":97,"outputs":[{"execution_count":97,"output_type":"execute_result","data":{"text/plain":"                                                   Text  Cluster  \\\n0     moeller 's student-run newspaper , crusader , ...      130   \n1     2008 , crusader first place , second-highest h...      130   \n2     squire student literary journal features stori...      130   \n3     paul keels - play-by-play announcer ohio state...      140   \n4            joe uecker - ohio state senator ( r-66 ) .       23   \n...                                                 ...      ...   \n8186  galiev 's ideas would attacked late 1920s anti...       89   \n8187  volga basin subject periodic droughts sometime...       74   \n8188  patriarch tikhon made appeal world community r...      112   \n8189  lenin ordered precious metals , precious stone...       89   \n8190                                                         137   \n\n                                           top_words representative_term  \n0          school, schools, college, education, high                high  \n1          school, schools, college, education, high                high  \n2          school, schools, college, education, high                high  \n3             reno, host, basketball, kalamazoo, new                reno  \n4     reconstruction, freedmen, south, states, state               state  \n...                                              ...                 ...  \n8186         soviet, russian, russia, central, union             russian  \n8187      average, climate, summer, winter, rainfall             average  \n8188        moscow, russia, jewish, russian, kharkiv              kharki  \n8189         soviet, russian, russia, central, union             russian  \n8190      tip, featuring, produced, remix, performed             remixes  \n\n[8191 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Text</th>\n      <th>Cluster</th>\n      <th>top_words</th>\n      <th>representative_term</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>moeller 's student-run newspaper , crusader , ...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008 , crusader first place , second-highest h...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>squire student literary journal features stori...</td>\n      <td>130</td>\n      <td>school, schools, college, education, high</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>paul keels - play-by-play announcer ohio state...</td>\n      <td>140</td>\n      <td>reno, host, basketball, kalamazoo, new</td>\n      <td>reno</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>joe uecker - ohio state senator ( r-66 ) .</td>\n      <td>23</td>\n      <td>reconstruction, freedmen, south, states, state</td>\n      <td>state</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8186</th>\n      <td>galiev 's ideas would attacked late 1920s anti...</td>\n      <td>89</td>\n      <td>soviet, russian, russia, central, union</td>\n      <td>russian</td>\n    </tr>\n    <tr>\n      <th>8187</th>\n      <td>volga basin subject periodic droughts sometime...</td>\n      <td>74</td>\n      <td>average, climate, summer, winter, rainfall</td>\n      <td>average</td>\n    </tr>\n    <tr>\n      <th>8188</th>\n      <td>patriarch tikhon made appeal world community r...</td>\n      <td>112</td>\n      <td>moscow, russia, jewish, russian, kharkiv</td>\n      <td>kharki</td>\n    </tr>\n    <tr>\n      <th>8189</th>\n      <td>lenin ordered precious metals , precious stone...</td>\n      <td>89</td>\n      <td>soviet, russian, russia, central, union</td>\n      <td>russian</td>\n    </tr>\n    <tr>\n      <th>8190</th>\n      <td></td>\n      <td>137</td>\n      <td>tip, featuring, produced, remix, performed</td>\n      <td>remixes</td>\n    </tr>\n  </tbody>\n</table>\n<p>8191 rows × 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"type(cluster_tokens)\n# Example list\n\n# Open a file in write mode\nwith open(\"token_list.txt\", \"w\") as file:\n    # Iterate through the list and write each item to the file\n    for item in cluster_tokens:\n        file.write(\"%s\\n\" % item)  # Write each item on a new line\n\nprint(\"List has been saved to 'output_list.txt'.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T11:19:46.980904Z","iopub.execute_input":"2024-10-06T11:19:46.981338Z","iopub.status.idle":"2024-10-06T11:19:47.052004Z","shell.execute_reply.started":"2024-10-06T11:19:46.981293Z","shell.execute_reply":"2024-10-06T11:19:47.048639Z"},"trusted":true},"execution_count":398,"outputs":[{"name":"stdout","text":"List has been saved to 'output_list.txt'.\n","output_type":"stream"}]},{"cell_type":"code","source":"df_string = dframe.to_string(index=False)\n\n# Save the DataFrame string to a text file\nwith open('dataframe_output.txt', 'w') as file:\n    file.write(df_string)\n\nprint(\"DataFrame has been saved as 'dataframe_output.txt'.\")","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:42:00.796161Z","iopub.execute_input":"2024-10-06T10:42:00.797139Z","iopub.status.idle":"2024-10-06T10:42:02.826033Z","shell.execute_reply.started":"2024-10-06T10:42:00.797096Z","shell.execute_reply":"2024-10-06T10:42:02.824990Z"},"trusted":true},"execution_count":348,"outputs":[{"name":"stdout","text":"DataFrame has been saved as 'dataframe_output.txt'.\n","output_type":"stream"}]},{"cell_type":"code","source":"\ndf_clustering = []# Create a string from the cluster_groups DataFrame (assuming it's a list of DataFrames)\nfor i in range(499):\n    df_clustering.append(cluster_groups.Text_Tokens[i][0])# Access the first DataFrame in the list\n\n# Save the DataFrame string to a text file\nwith open('cluster_tokens.txt', 'w') as file:\n    file.write(df_clusterstring)\n\nprint(\"DataFrame has been saved as 'cluster_tokens.txt'.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:55:04.203000Z","iopub.execute_input":"2024-10-06T10:55:04.204028Z","iopub.status.idle":"2024-10-06T10:55:04.222362Z","shell.execute_reply.started":"2024-10-06T10:55:04.203981Z","shell.execute_reply":"2024-10-06T10:55:04.221327Z"},"trusted":true},"execution_count":371,"outputs":[{"name":"stdout","text":"DataFrame has been saved as 'cluster_tokens.txt'.\n","output_type":"stream"}]},{"cell_type":"code","source":"df_clustering[93]","metadata":{"execution":{"iopub.status.busy":"2024-10-06T11:15:50.538243Z","iopub.execute_input":"2024-10-06T11:15:50.538680Z","iopub.status.idle":"2024-10-06T11:15:50.545072Z","shell.execute_reply.started":"2024-10-06T11:15:50.538640Z","shell.execute_reply":"2024-10-06T11:15:50.544011Z"},"trusted":true},"execution_count":391,"outputs":[{"execution_count":391,"output_type":"execute_result","data":{"text/plain":"array(['war', 'known', 'many', 'new', 'de', 'city', 'government', 'would',\n       'first', 'years', 'became', 'also', 'texas', 'time', 'town',\n       'state', 'world', 'one', 'two', 'school', 'century', 'used',\n       'united', 'national', 'states'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming 'dframe' is your DataFrame and it has 'cluster_id' and 'tokens' columns\n# 'cluster_id' column contains the cluster IDs, and 'tokens' column contains the respective text tokens\n\n# Step 1: Group by the cluster IDs\ncluster_groups = dframe.groupby('Cluster')['top_words'].apply(list).reset_index()\n\n# Step 2: Rename the column to make it clear\ncluster_groups.columns = ['Cluster', 'Text_Tokens']\n\n# Step 3: Display the results (Cluster ID and the list of associated text tokens)\n#for index, row in cluster_groups.iterrows():\n    #print(f\"Cluster ID: {row['Cluster']}, Text Tokens: {row['Text_Tokens']}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:24:01.490923Z","iopub.execute_input":"2024-10-06T10:24:01.491336Z","iopub.status.idle":"2024-10-06T10:24:01.520231Z","shell.execute_reply.started":"2024-10-06T10:24:01.491299Z","shell.execute_reply":"2024-10-06T10:24:01.519401Z"},"trusted":true},"execution_count":334,"outputs":[]},{"cell_type":"code","source":"cluster_groups.Text_Tokens[3][0].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:25:41.926227Z","iopub.execute_input":"2024-10-06T10:25:41.926673Z","iopub.status.idle":"2024-10-06T10:25:41.935869Z","shell.execute_reply.started":"2024-10-06T10:25:41.926629Z","shell.execute_reply":"2024-10-06T10:25:41.934923Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":343,"outputs":[{"execution_count":343,"output_type":"execute_result","data":{"text/plain":"['one',\n 'many',\n 'state',\n 'known',\n 'city',\n 'also',\n 'states',\n 'world',\n 'years',\n 'two',\n 'national',\n 'school',\n 'texas',\n 'new',\n 'town',\n 'de',\n 'war',\n 'first',\n 'time',\n 'used',\n 'united',\n 'government',\n 'would',\n 'century',\n 'became']"},"metadata":{}}]},{"cell_type":"code","source":"# Import required libraries\nimport google.generativeai as genai\nimport os\n\n# In Kaggle, you can set the API key as an environment variable.\n# You can do this by adding your API key directly into the Kaggle environment variable:\n# Go to \"Settings\" on the right-hand side in your Kaggle notebook and add your API key as a secret.\n\n# Get the API key from environment variables (store it in the Kaggle environment)\nGOOGLE_API_KEY = os.getenv('AIzaSyCH0DpMgdbzdj0GqV3mOO7iU976mwM2YOE')\n\n# Configure the Google Generative AI SDK with the API key\ngenai.configure(api_key=GOOGLE_API_KEY)\n\n# Now you can proceed with making requests using the genai library\nmodel = genai.GenerativeModel('gemini-pro')","metadata":{"execution":{"iopub.status.busy":"2024-10-06T10:26:02.152441Z","iopub.execute_input":"2024-10-06T10:26:02.153408Z","iopub.status.idle":"2024-10-06T10:26:02.159000Z","shell.execute_reply.started":"2024-10-06T10:26:02.153362Z","shell.execute_reply":"2024-10-06T10:26:02.157885Z"},"trusted":true},"execution_count":344,"outputs":[]},{"cell_type":"code","source":"import json\nimport requests\n\ndef read_and_convert_text_file_to_json(file_path):\n    # Open the text file and read its contents\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    # Create an empty list to store the lists\n    list_of_lists = []\n\n    # Iterate over the lines and process each list (assuming comma-separated)\n    for line in lines:\n        # Strip any leading/trailing spaces and newlines, and split by commas\n        input_list = line.strip().split(',')\n        \n        # Remove any extra spaces from individual items\n        input_list = [item.strip() for item in input_list]\n        \n        # Add the list to list_of_lists\n        list_of_lists.append(input_list)\n\n    # Now convert the lists into the desired JSON format\n    document_content = {\"contents\": []}\n\n    for input_list in list_of_lists:\n        formatted_terms = ', '.join(input_list)\n        content_entry = {\n            \"parts\": [\n                {\n                    \"text\": f\"I want you to give me a representative topic of these topics so that I can divert my calls which have these topics to the designated service person and respond with just the representative topic and nothing else: {formatted_terms}.\"\n                }\n            ]\n        }\n        document_content[\"contents\"].append(content_entry)\n\n    # Convert the entire structure into a JSON object\n    document_content_json = json.dumps(document_content, indent=4)\n    \n    return document_content_json\n\ndef send_to_gemini_api(json_data, api_url, api_key):\n    headers = {\n        'Content-Type': 'application/json',\n        'Authorization': f'Bearer {api_key}'  # Assuming Bearer token is used for authentication\n    }\n\n    # Send the request to the Gemini API\n    response = requests.post(api_url, headers=headers, data=json_data)\n\n    # Check the response from the API\n    if response.status_code == 200:\n        print(\"API call successful!\")\n        print(\"Response data:\", response.json())\n    else:\n        print(f\"API call failed with status code: {response.status_code}\")\n        print(\"Error response:\", response.text)\n\n# Example usage\nfile_path = '/kaggle/input/token-lits/token_list.txt'  # Path to your text document\njson_output = read_and_convert_text_file_to_json(file_path)\n\n# Define the API endpoint and API key for the Gemini API\napi_url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyCH0DpMgdbzdj0GqV3mOO7iU976mwM2YOE'  # Replace with the actual Gemini API endpoint\napi_key = 'AIzaSyCH0DpMgdbzdj0GqV3mOO7iU976mwM2YOE'  # Replace with your actual API key\n\n# Send the JSON output to the Gemini API\nsend_to_gemini_api(json_output, api_url, api_key)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-06T13:35:26.140273Z","iopub.execute_input":"2024-10-06T13:35:26.141186Z","iopub.status.idle":"2024-10-06T13:35:27.220515Z","shell.execute_reply.started":"2024-10-06T13:35:26.141143Z","shell.execute_reply":"2024-10-06T13:35:27.219525Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"API call failed with status code: 401\nError response: {\n  \"error\": {\n    \"code\": 401,\n    \"message\": \"Request had invalid authentication credentials. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\",\n    \"status\": \"UNAUTHENTICATED\"\n  }\n}\n\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}